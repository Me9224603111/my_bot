import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8151771562:AAEL7USxHEfnjcT6CSBtapqFL2Z4eZPqTUw"
GROUP_ID = -1001304012145
ADMIN_ID = 199804963

# === Google –¢–∞–±–ª–∏—Ü—ã ===
SCOPE = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
CREDS_FILE = "credentials.json"
credentials = ServiceAccountCredentials.from_json_keyfile_name(CREDS_FILE, SCOPE)
gc = gspread.authorize(credentials)

TABLE_1_ID = "1rzqSH5B7FAGzihe5UgWjydgzQoQfL-dO"
TABLE_2_ID = "YOUR_TABLE_ID_2"

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ===
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.MARKDOWN)
)
dp = Dispatcher()

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = AsyncIOScheduler()

# === –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ===
async def send_reminder():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ó–∞–ø–æ–ª–Ω–∏–ª", callback_data="filled")],
        [InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data="postpone")]
    ])
    
    message = (
        f"üîî *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!* –°–µ–≥–æ–¥–Ω—è 20-–µ —á–∏—Å–ª–æ.\n"
        f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ç–∞–±–ª–∏—Ü—ã:\n"
        f"üìÑ [–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–æ–≤](https://docs.google.com/spreadsheets/d/{TABLE_1_ID})\n"
        f"üìÑ [–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è](https://docs.google.com/spreadsheets/d/{TABLE_2_ID})"
    )

    await bot.send_message(GROUP_ID, message, reply_markup=keyboard)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ===
@dp.message(F.text == "/start")
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –î–®–ò! –ì–æ—Ç–æ–≤ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –≤–∞–∂–Ω—ã—Ö –¥–µ–ª–∞—Ö üòä")

# === Callback-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@dp.callback_query(F.data == "filled")
async def handle_filled(callback: CallbackQuery):
    user = callback.from_user.full_name
    await bot.send_message(ADMIN_ID, f"‚úÖ {user} –∑–∞–ø–æ–ª–Ω–∏–ª —Ç–∞–±–ª–∏—Ü—É!")
    await callback.answer("–°–ø–∞—Å–∏–±–æ! –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

@dp.callback_query(F.data == "postpone")
async def handle_postpone(callback: CallbackQuery):
    await callback.answer("–û–∫–µ–π, –Ω–∞–ø–æ–º–Ω—é –ø–æ–∑–∂–µ!")

# === –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª ===
async def main():
    scheduler.add_job(send_reminder, "cron", day=20, hour=10, minute=0)
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())